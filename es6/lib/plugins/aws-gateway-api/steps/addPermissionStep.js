export default function addPermissionStep(conan, context, stepDone) {
	const AWS = context.libraries.AWS;
	const region = conan.config.region;
	const lambda = new AWS.Lambda({
		region
	});
	if(typeof context.parameters.lambda === "function") {
		const lambdaName = context.parameters.lambda();
		// HACK's:
		// 1. currently giving permissins to all apigateway
		// particular source arn for resource or api are not working
		// docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-apigateway
		// const path = context.parameters.path();
		// 2. statement id, when it's particular can be an autogenerated uuid
		// after a get policy and removal of the previous one if it exists
		lambda.addPermission({
			"FunctionName": lambdaName,
			// "SourceArn": `arn:aws:apigateway:${region}::${path}`,
			// "SourceArn": `arn:aws:apigateway:${region}::/restapis/${restApiId}/*`,
			"Action": "lambda:InvokeFunction",
			"Principal": "apigateway.amazonaws.com",
			"StatementId": "1"
		}, (error) => {
			if (error && error.statusCode === 409) {
				stepDone(null);
			} else if (error) {
				stepDone(error);
			} else {
				stepDone(null);
			}
		});
	} else {
		stepDone();
	}
}
